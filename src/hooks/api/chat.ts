import { useLoadDataQuery } from '@/hooks/api/load-data';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '@/lib/api';
import { useChatChannel } from '@/components/layout/chat';

export const chatHistory = async (channel: ChatChannel) => {
  const fd = new FormData();
  fd.append('channel', channel);

  return await api
    .post('ajax/chat/history', {
      body: fd,
    })
    .json<ChatHistoryResponse>();
};

export const useChatHistoryQuery = () => {
  const [channel] = useChatChannel();

  const data = useLoadDataQuery();

  return useQuery({
    queryKey: ['chat_history', channel],
    queryFn: () => chatHistory(channel),
    enabled: Boolean(data?.data?.token),
  });
};

export const useChatSendMessageMutation = () => {
  const user = useLoadDataQuery();
  const utils = useQueryClient(); // NOTE: avoid destructuring here
  const [channel] = useChatChannel();

  return useMutation({
    mutationKey: ['send_message'],
    mutationFn: async (text: string) => {
      // do optimistic update
      const oldData = utils.getQueryData([
        'chat_history',
      ]) as ChatHistoryResponse;

      const newData = {
        ...oldData,
        result: {
          ...oldData.result,
          messages: [
            ...oldData.result.messages,
            {
              id: 0,
              text,
              time: Date.now(),
              user_id: user.data?.data.user_id || 0,
              user_nickname: user.data?.data.name || '',
              user_avatar: user.data?.data.avatar || '',
              user_is_moderator: 0,
              user_is_administrator: 0,
            },
          ],
        },
      };

      utils.cancelQueries(['chat_history']);
      utils.setQueryData(['chat_history'], newData);

      const fd = new FormData();
      fd.append('channel', channel);
      fd.append('text', text);

      const data = await api
        .post('ajax/chat/send_message', {
          body: fd,
        })
        .json<any>();

      return data;
    },
    onSuccess: () => {},
    onSettled: () => {
      utils.invalidateQueries(['chat_history']);
    },
  });
};

// Generated by https://quicktype.io

export interface ChatHistoryResponse {
  success: boolean;
  result: Result;
}

export interface Result {
  messages: Message[];
  pinned: null;
}

export interface Message {
  id: number;
  text: string;
  time: number;
  user_id: number;
  user_nickname: string;
  user_avatar: string;
  user_is_moderator: number;
  user_is_administrator: number;
}

export type ChatChannel = 'ru' | 'en';
